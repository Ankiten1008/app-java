// Groovy Scripyt
node{
  def mvnHome = tool name: 'maven-tool', type: 'maven'
  stage('GIT Checkout'){
    checkout([$class: 'GitSCM',
                branches: [[name: '*/master' ]],
                extensions: scm.extensions,
                userRemoteConfigs: [[
                    url: 'https://github.com/Ankiten1008/app-java.git',
                    credentialsId: 'gitCredentials'
                ]]
            ])
    }
    
    stage('Build with Maven'){
      sh "echo env.BRANCH_NAME"
      sh "${mvnHome}/bin/mvn package"
      }
     
    /*stage('SonarQube Code Analysis'){
      withSonarQubeEnv('sonar_server'){
        sh "${mvnHome}/bin/mvn sonar:sonar"
        }
     }*/
     
     stage('SonarQube analysis') {
    def scannerHome = tool name: 'sonar_direct', type: 'hudson.plugins.sonar.SonarRunnerInstallation';
    withSonarQubeEnv('sonar_server') { 
      sh "${scannerHome}/bin/sonar-scanner"
      }
     } 
     
     stage("Quality Gate"){
  timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
    if (qg.status != 'OK') {
      error "Pipeline aborted due to quality gate failure: ${qg.status}"
    }
  }
}
    stage("Upload in Jfrog"){
        rtUpload (
            serverId: 'JFrog_Artifactory',
            spec: '''{
                  "files": [
                    {
                      "pattern": "target/*.war",
                      "target": "ankit/Myapp-files/"
                    }
                 ]
            }''',

        )
     }

    stage('Deploy to Tomcat Server'){
         sh 'chmod 777 target/*.war'
         sh 'cp target/*.war /opt/apache-tomcat-8.5.51/webapps/'
      }
    stage('Build Docker Image'){
     sh 'docker build -t ankiten1008/my-app .'
   }
   stage('Push Docker Image'){
     withCredentials([string(credentialsId: 'docker_hub_password', variable: 'dockerPassword')]) {
        sh "docker login -u ankiten1008 -p ${dockerPassword}"
     }
     sh 'docker push ankiten1008/my-app'
   }
   stage('Run Container on Dev Server'){
     def dockerRun = 'docker run -p 8082:8080 -d ankiten1008/my-app'
       sh "${dockerRun}"
   }
   stage('Email Notification'){
   mail bcc: '', body: "hello : Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'", cc: 'ankiten1008@gmail.com', from: '', replyTo: '', subject: '## Jenkins Deployment Successful ##', to: 'ankitjaiswal934@gmail.com'
   }
}
